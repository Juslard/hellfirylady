обработчик базы
def ensure_connection(func):
    """ Декоратор для подключения к СУБД: открывает соединение,
        выполняет переданную функцию и закрывает за собой соединение.
        Потокобезопасно!
    """
    def inner(*args, **kwargs):
        with sqlite3.connect('telebot.db') as conn:
            kwargs['conn'] = conn
            res = func(*args, **kwargs)
        return res

    return inner


@ensure_connection
def init_db(conn, force: bool = False):
    """ Проверить что нужные таблицы существуют, иначе создать их

        Важно: миграции на такие таблицы вы должны производить самостоятельно!

        :param conn: подключение к СУБД
        :param force: явно пересоздать все таблицы
    """
    c = conn.cursor()

    # Информация о пользователе
    # TODO: создать при необходимости...

    # Сообщения от пользователей
    if force:
        c.execute('DROP TABLE IF EXISTS user_message')

    c.execute('''
        CREATE TABLE IF NOT EXISTS user_message (
            id          INTEGER PRIMARY KEY,
            user_id     INTEGER NOT NULL,
            ref_id      INTEGER NOT NULL,
            balance     INTEGER NOT NULL,
            ref_num     INTEGER NOT NULL,
            process     INTEGER NOT NULL,
            sale        INTEGER NOT NULL,
            phone       INTEGER NOT NULL,
            purchases   TEXT NOT NULL

        )
    ''')

    # Сохранить изменения
    conn.commit()


@ensure_connection
def add_record(conn, user_id: int, ref_id: int = 646247390, balance: int = 0, ref_num: int = 0, process: int = 0, sale:int = 0, phone:int = 0, purchases: str = ""):
    c = conn.cursor()
    c.execute('INSERT INTO user_message (user_id, ref_id, balance, ref_num, process, sale, phone, purchases) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', (user_id, ref_id, balance, ref_num, process, sale, phone, purchases))
    conn.commit()

@ensure_connection
def change_record(conn, user_id: int, sum: int,limit: int = 1):
    c = conn.cursor()
    c.execute('UPDATE user_message SET balance = balance + ' + str(sum) + ' WHERE user_id = ' + str(user_id))
    return c.fetchall()

@ensure_connection
def set_balanse(conn, user_id: int, sum: int,limit: int = 1):
    c = conn.cursor()
    c.execute('UPDATE user_message SET balance = ' + str(sum) + ' WHERE user_id = ' + str(user_id))
    return c.fetchall()

@ensure_connection
def set_ref(conn, user_id: int, ref_num: int,limit: int = 1):
    c = conn.cursor()
    c.execute('UPDATE user_message SET ref_num = ' + str(ref_num) + ' WHERE user_id = ' + str(user_id))
    return c.fetchall()

@ensure_connection
def set_phone(conn, user_id: int, phone: int,limit: int = 1):
    c = conn.cursor()
    c.execute('UPDATE user_message SET phone = ' + str(phone) + ' WHERE user_id = ' + str(user_id))
    return c.fetchall()

@ensure_connection
def add_ref(conn, user_id: int, limit: int = 1):
    c = conn.cursor()
    c.execute('UPDATE user_message SET ref_num = ref_num + 1 WHERE user_id = ' + str(user_id))
    return c.fetchall()

@ensure_connection
def list_record(conn, user_id: int, limit: int = 19):
    c = conn.cursor()
    c.execute('SELECT id,user_id,ref_id,balance,ref_num,process,sale,phone,purchases FROM user_message WHERE user_id = ? ORDER BY id DESC LIMIT ?', (user_id, limit))
    return c.fetchall()

@ensure_connection
def scerch_record(conn, user_id: int, limit: int = 19):
    c = conn.cursor()
    c.execute('SELECT id,user_id,ref_id,balance,ref_num,process,sale,phone,purchases FROM user_message WHERE user_id > ? ORDER BY id DESC LIMIT ?', (user_id, limit))
    return c.fetchall()

@ensure_connection
def check_record(conn, user_id: int, limit: int = 1):
    c = conn.cursor()
    c.execute('SELECT id FROM user_message WHERE user_id = ? ORDER BY id DESC LIMIT ?', (user_id, limit))
    return c.fetchall()

@ensure_connection
def rass(conn, user_id: int = 0, limit: int = 250000):
    c = conn.cursor()
    c.execute('SELECT user_id FROM user_message WHERE id > ? ORDER BY id DESC LIMIT ?', (user_id, limit))
    return c.fetchall()



def check_user(id):
    if check_record(user_id = id) == []:
        add_record(user_id = id)
        return 0


try:
    bot.send_message(1204923521, "Бот запущен", reply_markup = None)
except:
    pass

init_db()
#обработчик текста
@bot.message_handler(content_types = ["text"])
