#! /usr/bin/env python
# -*- coding: utf-8 -*-
#python3

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
import telebot
import sqlite3
from threading import Thread
import requests
import json
import time
from SimpleQIWI import *


bot = telebot.TeleBot("-")

QIWI_TOKEN = '-'
QIWI_ACCOUNT = '-'
QIWI_LINK = '-'
QIWI_KART = '-'
api = QApi(token=QIWI_TOKEN, phone=QIWI_ACCOUNT)

#–∞–¥–º–∏–Ω—ã
admin = (646247390, 1204923521)



#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–∑—ã
def ensure_connection(func):
    """ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –°–£–ë–î: –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ,
        –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∑–∞ —Å–æ–±–æ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
        –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ!
    """
    def inner(*args, **kwargs):
        with sqlite3.connect('telebot.db') as conn:
            kwargs['conn'] = conn
            res = func(*args, **kwargs)
        return res

    return inner


@ensure_connection
def init_db(conn, force: bool = False):
    """ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—Ç—å –∏—Ö

        –í–∞–∂–Ω–æ: –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ!

        :param conn: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –°–£–ë–î
        :param force: —è–≤–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    """
    c = conn.cursor()

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    # TODO: —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏...

    # –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if force:
        c.execute('DROP TABLE IF EXISTS user_message')

    c.execute('''
        CREATE TABLE IF NOT EXISTS user_message (
            id          INTEGER PRIMARY KEY,
            user_id     INTEGER NOT NULL,
            ref_id      INTEGER NOT NULL,
            balance     INTEGER NOT NULL,
            ref_num     INTEGER NOT NULL,
            process     INTEGER NOT NULL,
            sale        INTEGER NOT NULL,
            phone       INTEGER NOT NULL,
            purchases   TEXT NOT NULL

        )
    ''')

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    conn.commit()


@ensure_connection
def add_record(conn, user_id: int, ref_id: int = 646247390, balance: int = 0, ref_num: int = 0, process: int = 0, sale:int = 0, phone:int = 0, purchases: str = ""):
    c = conn.cursor()
    c.execute('INSERT INTO user_message (user_id, ref_id, balance, ref_num, process, sale, phone, purchases) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', (user_id, ref_id, balance, ref_num, process, sale, phone, purchases))
    conn.commit()

@ensure_connection
def change_record(conn, user_id: int, sum: int,limit: int = 1):
    c = conn.cursor()
    c.execute('UPDATE user_message SET balance = balance + ' + str(sum) + ' WHERE user_id = ' + str(user_id))
    return c.fetchall()

@ensure_connection
def set_balanse(conn, user_id: int, sum: int,limit: int = 1):
    c = conn.cursor()
    c.execute('UPDATE user_message SET balance = ' + str(sum) + ' WHERE user_id = ' + str(user_id))
    return c.fetchall()

@ensure_connection
def set_ref(conn, user_id: int, ref_num: int,limit: int = 1):
    c = conn.cursor()
    c.execute('UPDATE user_message SET ref_num = ' + str(ref_num) + ' WHERE user_id = ' + str(user_id))
    return c.fetchall()

@ensure_connection
def set_phone(conn, user_id: int, phone: int,limit: int = 1):
    c = conn.cursor()
    c.execute('UPDATE user_message SET phone = ' + str(phone) + ' WHERE user_id = ' + str(user_id))
    return c.fetchall()

@ensure_connection
def add_ref(conn, user_id: int, limit: int = 1):
    c = conn.cursor()
    c.execute('UPDATE user_message SET ref_num = ref_num + 1 WHERE user_id = ' + str(user_id))
    return c.fetchall()

@ensure_connection
def list_record(conn, user_id: int, limit: int = 19):
    c = conn.cursor()
    c.execute('SELECT id,user_id,ref_id,balance,ref_num,process,sale,phone,purchases FROM user_message WHERE user_id = ? ORDER BY id DESC LIMIT ?', (user_id, limit))
    return c.fetchall()

@ensure_connection
def scerch_record(conn, user_id: int, limit: int = 19):
    c = conn.cursor()
    c.execute('SELECT id,user_id,ref_id,balance,ref_num,process,sale,phone,purchases FROM user_message WHERE user_id > ? ORDER BY id DESC LIMIT ?', (user_id, limit))
    return c.fetchall()

@ensure_connection
def check_record(conn, user_id: int, limit: int = 1):
    c = conn.cursor()
    c.execute('SELECT id FROM user_message WHERE user_id = ? ORDER BY id DESC LIMIT ?', (user_id, limit))
    return c.fetchall()

@ensure_connection
def rass(conn, user_id: int = 0, limit: int = 250000):
    c = conn.cursor()
    c.execute('SELECT user_id FROM user_message WHERE id > ? ORDER BY id DESC LIMIT ?', (user_id, limit))
    return c.fetchall()



def check_user(id):
    if check_record(user_id = id) == []:
        add_record(user_id = id)
        return 0


try:
    bot.send_message(1204923521, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", reply_markup = None)
except:
    pass

init_db()
#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(content_types = ["text"])




def handle_text(message):
    try:
        if message.text == "/start":
            check_user(message.chat.id)
            start_markup = telebot.types.ReplyKeyboardMarkup(True, True)
            start_markup.row("üóÇ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤","‚ÑπÔ∏è –ö–∞–∫ –∫—É–ø–∏—Ç—å")

            bot.send_message(message.chat.id , "–ü—Ä–∏–≤–µ—Ç " + message.chat.first_name + """
–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ -
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ö–∞–∫ –∫—É–ø–∏—Ç—å' """, reply_markup = start_markup)


        elif message.text.find("/start") == 0:
            if check_record(user_id = message.chat.id) == []:
                add_record(user_id = message.chat.id, ref_id = message.text[7:])
                check_user(message.text[7:])
                add_ref(user_id = message.text[7:])
                bot.send_message(message.text[7:], "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à—ë–ª –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ", reply_markup = None)

            start_markup = telebot.types.ReplyKeyboardMarkup(True, True)
            start_markup.row("üóÇ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤","‚ÑπÔ∏è –ö–∞–∫ –∫—É–ø–∏—Ç—å")


            bot.send_message(message.chat.id , "–ü—Ä–∏–≤–µ—Ç " + message.chat.first_name + """
–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ -
""", reply_markup = start_markup)


        elif (message.text.find("/ras") == 0) and (message.chat.id in admin):
            ras_text = message.text[4:]
            bot.send_message(message.chat.id , "–†–∞—Å—Å—ã–ª–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º " + str(ras_text) + " –∑–∞–ø—É—â–µ–Ω–Ω–∞", reply_markup = None)
            req = rass(user_id = 0)
            try:
                for i in range (5000):
                    try:
                        bot.send_message(req[i][0], ras_text, reply_markup = None)
                    except:
                        pass
            except:
                pass
            bot.send_message(message.chat.id , "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup = None)

        elif (message.text.find("/sbl") == 0) and (message.chat.id in admin):
            sbl_text = message.text.split()
            set_balanse(user_id = sbl_text[1], sum = sbl_text[2])
            bot.send_message(message.chat.id , "–ü–æ–ª—å–∑–∞–≤–æ—Ç–µ–ª—é —Å –∫–æ–¥–æ–º " + str(sbl_text[1]) + " —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å " +  str(sbl_text[2]), reply_markup = None)

        elif message.text == "/db" and (message.chat.id in admin):

            bot.send_message(message.chat.id , "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + str(scerch_record(user_id = 0)[0][0]), reply_markup = None)

        elif (message.text.find("/srf") == 0) and (message.chat.id in admin):
            srf_text = message.text.split()
            set_ref(user_id = srf_text[1], ref_num = srf_text[2])
            bot.send_message(message.chat.id , "–ü–æ–ª—å–∑–∞–≤–æ—Ç–µ–ª—é —Å –∫–æ–¥–æ–º " + str(srf_text[1]) + " —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ " +  str(srf_text[2]), reply_markup = None)

        elif (message.text.find("/sms") == 0) and (message.chat.id in admin):
            srf_text = message.text.split()
            srf_text_sms = ""
            for i in range(len(srf_text) - 2):
                srf_text_sms = srf_text_sms + srf_text[i + 2]
                srf_text_sms = srf_text_sms + " "
            try:
                bot.send_message(srf_text[1] , str(srf_text_sms), reply_markup = None)
                bot.send_message(message.chat.id , "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–æ–¥–æ–º " + str(srf_text[1]) + " –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ " +  str(srf_text_sms), reply_markup = None)
            except:
                bot.send_message(message.chat.id , "–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π", reply_markup = None)


        elif message.text.find("/set") == 0:
            check_record(user_id = message.chat.id)
            set_phone(user_id = message.chat.id, phone = message.text[5:])
            bot.send_message(message.chat.id, "–ù–æ–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup = None)

        elif (message.text.find("/stats") == 0) and (message.chat.id in admin):
            check_record(user_id = message.chat.id)
            stats_req = list_record(user_id = message.text[7:])
            bot.send_message(message.chat.id, "–ë–∞–ª–∞–Ω—Å: " + str(stats_req[0][3]) + """
–ü—Ä–∏–≤–µ–¥–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: """ + str(stats_req[0][4]), reply_markup = None)

        if (message.text == "/balance") and (message.chat.id in admin):
            bot.send_message(message.chat.id , "–ù–∞ —Å—á–µ—Ç—É: " + str(api.balance[0]), reply_markup = None)


        elif message.text.find("/pay") == 0:
            check_record(user_id = message.chat.id)

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ", reply_markup = None)

        elif message.text == "/code":
            check_user(message.chat.id)
            bot.send_message(message.chat.id, message.chat.id, reply_markup = None)
        elif message.text == "üóÇ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤":
            check_user(message.chat.id)
            tovars_markup = telebot.types.InlineKeyboardMarkup()
            tovars_item1 = telebot.types.InlineKeyboardButton("- 99—Ä üî•", callback_data = "Private")


            tovars_markup.row(tovars_item1)


            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ", reply_markup = tovars_markup)



        elif message.text == "‚ÑπÔ∏è –ö–∞–∫ –∫—É–ø–∏—Ç—å":
            opicanie_markup = telebot.types.InlineKeyboardMarkup()
            opicanie_item = telebot.types.InlineKeyboardButton("–ö—É–ø–∏—Ç—å -", callback_data = "Private")

            opicanie_markup.row(opicanie_item)
            check_user(message.chat.id)
            bot.send_message(message.chat.id, """ –î–ª—è –ø–æ–∫—É–ø–∫–∏: –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä, –≤—ã–±–∏—Ä–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, –æ–ø–ª–∞—á–∏–≤–∞–µ–º –° –£–ö–ê–ó–ê–ù–ò–ï–ú —Å–≤–æ–µ–≥–æ –∞–π–¥–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É.
–°–≤–æ–π –∞–π–¥–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. """, reply_markup = opicanie_markup)
    except Exception as e:
        try:
            bot.send_message(message.chat.id , "–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞", reply_markup = None)
            bot.send_message(646247390, "–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞", reply_markup = None)
            bot.send_message(646247390, str(repr(e)), reply_markup = None)
        except:
            pass






@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == "Menu":
                menu_markup = telebot.types.ReplyKeyboardMarkup(True, True)
                start_markup.row("üóÇ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤","‚ÑπÔ∏è –ö–∞–∫ –∫—É–ø–∏—Ç—å")

                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
                bot.send_message(call.message.chat.id , "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",reply_markup = menu_markup)



            if call.data == "Private":
                tovar_markup = telebot.types.InlineKeyboardMarkup()
                tovar_item1 = telebot.types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data = "pay_call11")
                tovar_item2 = telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data = "BackTovars")

                tovar_markup.row(tovar_item1)
                tovar_markup.row(tovar_item2)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="""–ü—Ä–∏–≤–∞—Ç

üí∞ –¶–µ–Ω–∞: 99 —Ä—É–±–ª–µ–π

üöö –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—É –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É.

–í–Ω–∏–º–∞–Ω–∏–µ, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–π–¥–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. """, reply_markup = tovar_markup)


            if call.data.find("pay_call") == 0:
                pay_call_id = call.data[8:]
                pay_call_markup = telebot.types.InlineKeyboardMarkup()
                pay_call_item1 = telebot.types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ QIWI ü•ù", callback_data = "pay_qiwi" + str(pay_call_id))
                pay_call_item2 = telebot.types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –°–±–µ—Ä–±–∞–Ω–∫ üí≥", callback_data = "pay_sber" + str(pay_call_id))
                pay_call_item3 = telebot.types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ üèß", callback_data = "pay_link" + str(pay_call_id))

                pay_call_markup.row(pay_call_item1)
                pay_call_markup.row(pay_call_item2)
                pay_call_markup.row(pay_call_item3)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",reply_markup=pay_call_markup)

            QIWI_ACCOUNT = '-'
            QIWI_LINK = '-'
            QIWI_KART = ' -'

            if call.data == "pay_link11":
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=("–û–ø–ª–∞—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ " + QIWI_LINK + """
—Ü–µ–Ω–∞: 99 —Ä—É–±–ª–µ–π,
–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–π–¥–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. """  ), reply_markup=None)

            if call.data == "pay_qiwi11":
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=("–û–ø–ª–∞—Ç–∞ QIWI –Ω–∞ —Å—á–µ—Ç " + QIWI_ACCOUNT + """
—Ü–µ–Ω–∞: 99 —Ä—É–±–ª–µ–π,
–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–π–¥–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. """  ), reply_markup=None)

            if call.data == "pay_sber11":
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=("–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫ " + QIWI_KART + """
—Ü–µ–Ω–∞: 99 —Ä—É–±–ª–µ–π,
–Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–π–¥–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. """ ), reply_markup=None)



            if call.data == "BackTovars":
                tovars_markup = telebot.types.InlineKeyboardMarkup()
                tovars_item1 = telebot.types.InlineKeyboardButton("- 99—Ä üî•", callback_data = "Private")


                tovars_markup.row(tovars_item1)

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ", reply_markup=tovars_markup)



    except Exception as e:
        try:
            bot.send_message(message.chat.id , "–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞", reply_markup = None)
            bot.send_message(1204923521, "–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞", reply_markup = None)
            bot.send_message(1204923521, str(repr(e)), reply_markup = None)
        except:
            pass




#–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop = True, interval = 0)
